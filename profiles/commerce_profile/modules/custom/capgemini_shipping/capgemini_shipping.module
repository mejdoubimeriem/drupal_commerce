<?php

/**
 * @file
 * Defines a capgemini shipping method for testing and development.
 */

/**
 * Implements hook_commerce_shipping_method_info().
 */
function capgemini_shipping_commerce_shipping_method_info() {
    $shipping_methods = array();

    $shipping_methods['capgemini_shipping_method'] = array(
      'title' => t('Capgemini shipping method'),
      'description' => t('Defines a single flat rate service with a couple of service details.'),
    );

    return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function capgemini_shipping_commerce_shipping_service_info() {
    $shipping_services = array();

    $shipping_services['capgemini_shipping_service'] = array(
      'title' => t('Capgemini shipping service'),
      'description' => t('A flat rate service with express delivery available.'),
      'display_title' => t('Capgemini Shipping'),
      'shipping_method' => 'capgemini_shipping_method',
      'price_component' => 'shipping',
      'callbacks' => array(
        'rate' => 'capgemini_shipping_service_rate',
        'details_form' => 'capgemini_shipping_service_details_form',
        'details_form_validate' => 'capgemini_shipping_service_details_form_validate',
        'details_form_submit' => 'capgemini_shipping_service_details_form_submit',
      ),
    );

    return $shipping_services;
}

/**
 * Shipping service callback.
 *
 * Returns a base price array for a shipping service
 * calculated for the given order.
 */
function capgemini_shipping_service_rate($shipping_service, $order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $capgemini_shipping_ammount = variable_get('capgemini_shipping_amount') * 100;
    return array(
      'amount' => $capgemini_shipping_ammount,
      'currency_code' => $order_wrapper->commerce_order_total->currency_code->value(),
      'data' => array(),
    );
}

/**
 * Shipping service callback: returns the example shipping service details form.
 */
function capgemini_shipping_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service) {
    $form = array();

    $pane_values['service_details'] += array(
      'name' => '',
      'express' => '',
    );

    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Your Name for shipping( your name for example)'),
      '#description' => t('This is a demonstration field coded to fail validation for single character values.'),
      '#default_value' => $pane_values['service_details']['name'],
      '#required' => TRUE,
    );

    $form['express'] = array(
      '#type' => 'checkbox',
      '#title' => t('Express delivery'),
      '#description' => t('Express delivery is really fast and you need to pay extra for this service.'),
      '#default_value' => $pane_values['service_details']['express'],
    );

    return $form;
}

/**
 * Shipping service callback: validates the example shipping service details.
 */
function capgemini_shipping_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents) {
    if (strlen($details_values['name']) < 5) {
        form_set_error(implode('][', array_merge($form_parents, array('name'))), t('You must enter a name five or more characters long.'));

        // Even though the form error is enough to stop the submission of the form,
        // it's not enough to stop it from a Commerce standpoint because of the
        // combined validation / submission going on per-pane in the checkout form.
        return FALSE;
    }
}

/**
 * Shipping service callback.
 *
 * Increases the shipping line item's unit price if
 * express delivery was selected.
 */
function capgemini_shipping_service_details_form_submit($details_form, $details_values, $line_item) {
    if ($details_values['express']) {
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

        if ($line_item_wrapper->commerce_unit_price->amount->value() < 40000) {

            // Build a price array for the express delivery fee.
            $express_price = array(
              'amount' => 500,
              'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value(),
              'data' => array(),
            );
            // Add the express upcharge to the line item unit price.
            $line_item_wrapper->commerce_unit_price->amount = $line_item_wrapper->commerce_unit_price->amount->value() + 500;
        }
        else {
            // Build a price array for the express delivery fee.
            $express_price = array(
              'amount' => 300,
              'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value(),
              'data' => array(),
            );
            // Add the express upcharge to the line item unit price.
            $line_item_wrapper->commerce_unit_price->amount = $line_item_wrapper->commerce_unit_price->amount->value() + 300;
        }

        // Add the express delivery fee component to the unit price.
        $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
          $line_item_wrapper->commerce_unit_price->value(), 'capgemini_shipping_service_express', $express_price, TRUE, FALSE
        );
    }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function capgemini_shipping_commerce_price_component_type_info() {
    return array(
      'capgemini_shipping_service_express' => array(
        'title' => t('Capgemini Express Delivery'),
        'weight' => 20,
      ),
    );
}

/**
 * Implements hook_commerce_checkout_page_info().
 */
function capgemini_shipping_commerce_checkout_page_info() {
    $checkout_pages = array();

    $checkout_pages['capgemini_shipping'] = array(
      'title' => t('Capgemini Shipping'),
      'weight' => 7,
    );

    return $checkout_pages;
}

/**
 * Implements hook_menu().
 */
function capgemini_shipping_menu() {
    $items = array();
    $items['admin/commerce/config/capgemini/shipping'] = array(
      'title' => t('Capgemini shipping amount'),
      'description' => t('Capgemini shipping amount'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('capgemini_shipping_settings'),
      'access arguments' => array('configure store'),
      'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

/**
 * Manage Capgemini shipping ammount.
 */
function capgemini_shipping_settings($form, &$form_state) {

    $form = array();
    $form['capgemini_shipping_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Capgemini shipping amount'),
      '#description' => t('Set the capgemini checkout shipping amount for users.'),
      '#required' => TRUE,
      '#default_value' => variable_get('capgemini_shipping_amount'),
      '#element_validate' => array('element_validate_number')
    );
    //$form['#validate'][] = 'capgemini_shipping_setting_form_validate';
    return system_settings_form($form);
}

